import TelegramBot from "node-telegram-bot-api";
import { storage } from "./storage";
import { DEPARTMENTS, IT_DEPARTMENT, type Department } from "@shared/schema";

if (!process.env.TELEGRAM_BOT_TOKEN) {
  throw new Error("TELEGRAM_BOT_TOKEN is not set");
}

const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });

// User state management
interface UserState {
  step: 'awaiting_text' | 'awaiting_departments' | 'awaiting_confirmation';
  postText?: string;
  selectedDepartments?: string[];
}

const userStates = new Map<string, UserState>();

// Welcome message text
const WELCOME_MESSAGE = `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!

–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏ –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö.

–ö–æ–≥–¥–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º), –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –æ—Ç–¥–µ–ª–∞–º.

üìå –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –æ—Ç–¥–µ–ª –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:`;

// Department selection keyboard
function getDepartmentKeyboard() {
  const keyboard: TelegramBot.InlineKeyboardButton[][] = [];
  
  // Create rows with 1 button each for better readability
  for (let i = 0; i < DEPARTMENTS.length; i++) {
    keyboard.push([
      {
        text: DEPARTMENTS[i],
        callback_data: `dept_${i}`,
      },
    ]);
  }
  
  return {
    inline_keyboard: keyboard,
  };
}

// Admin menu keyboard
function getAdminKeyboard() {
  return {
    inline_keyboard: [
      [
        {
          text: "‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç",
          callback_data: "create_post",
        },
      ],
      [
        {
          text: "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–¥–µ–ª",
          callback_data: "change_department",
        },
      ],
    ],
  };
}

// Regular user keyboard
function getUserKeyboard() {
  return {
    inline_keyboard: [
      [
        {
          text: "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–¥–µ–ª",
          callback_data: "change_department",
        },
      ],
    ],
  };
}

// Get department selection keyboard with checkboxes for post creation
function getPostDepartmentKeyboard(selectedDepartments: string[] = []) {
  const keyboard: TelegramBot.InlineKeyboardButton[][] = [];
  
  // Add department buttons with checkmarks for selected ones
  for (let i = 0; i < DEPARTMENTS.length; i++) {
    const dept = DEPARTMENTS[i];
    const isSelected = selectedDepartments.includes(dept);
    keyboard.push([
      {
        text: `${isSelected ? '‚úÖ' : '‚òê'} ${dept}`,
        callback_data: `toggle_dept_${i}`,
      },
    ]);
  }
  
  // Add "Select All" / "Deselect All" button
  const allSelected = selectedDepartments.length === DEPARTMENTS.length;
  keyboard.push([
    {
      text: allSelected ? "‚ùå –°–Ω—è—Ç—å –≤—Å–µ" : "‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ",
      callback_data: "toggle_all_depts",
    },
  ]);
  
  // Add Done button (only if at least one department is selected)
  if (selectedDepartments.length > 0) {
    keyboard.push([
      {
        text: `‚úîÔ∏è –ì–æ—Ç–æ–≤–æ (${selectedDepartments.length})`,
        callback_data: "done_selecting_depts",
      },
    ]);
  }
  
  // Add Cancel button
  keyboard.push([
    {
      text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
      callback_data: "cancel_post",
    },
  ]);
  
  return {
    inline_keyboard: keyboard,
  };
}

// Get confirmation keyboard
function getConfirmationKeyboard() {
  return {
    inline_keyboard: [
      [
        {
          text: "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å",
          callback_data: "confirm_publish",
        },
      ],
      [
        {
          text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
          callback_data: "cancel_post",
        },
      ],
    ],
  };
}

// Handle /start command
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const telegramId = msg.from?.id.toString();
  
  if (!telegramId) return;
  
  try {
    // Check if user exists
    const existingUser = await storage.getTelegramUserByTelegramId(telegramId);
    
    if (existingUser && existingUser.department) {
      // User already registered
      const keyboard = existingUser.isAdmin ? getAdminKeyboard() : getUserKeyboard();
      
      await bot.sendMessage(
        chatId,
        `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, ${msg.from?.first_name}!\n\n` +
        `–í–∞—à –æ—Ç–¥–µ–ª: ${existingUser.department}\n` +
        (existingUser.isAdmin ? `–°—Ç–∞—Ç—É—Å: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n\n` : `\n`) +
        `–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–µ –≤–∞—à–µ–º—É –æ—Ç–¥–µ–ª—É.`,
        { reply_markup: keyboard }
      );
    } else {
      // New user - show welcome and department selection
      await bot.sendMessage(chatId, WELCOME_MESSAGE, {
        reply_markup: getDepartmentKeyboard(),
      });
    }
  } catch (error) {
    console.error("Error in /start command:", error);
    await bot.sendMessage(
      chatId,
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ IT-–æ—Ç–¥–µ–ª."
    );
  }
});

// Handle text messages (for post creation)
bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const telegramId = msg.from?.id.toString();
  const text = msg.text;
  
  if (!telegramId || !text) return;
  
  // Ignore commands
  if (text.startsWith('/')) return;
  
  try {
    const userState = userStates.get(telegramId);
    
    if (userState && userState.step === 'awaiting_text') {
      // Save post text and move to department selection
      userState.postText = text;
      userState.step = 'awaiting_departments';
      userState.selectedDepartments = [];
      
      await bot.sendMessage(
        chatId,
        `üìù –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n` +
        `–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª—ã, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:`,
        { 
          reply_markup: getPostDepartmentKeyboard([])
        }
      );
    }
  } catch (error) {
    console.error("Error handling text message:", error);
    await bot.sendMessage(
      chatId,
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    );
  }
});

// Handle callback queries (button presses)
bot.on("callback_query", async (query) => {
  const chatId = query.message?.chat.id;
  const telegramId = query.from.id.toString();
  const data = query.data;
  
  if (!chatId || !data) return;
  
  try {
    // Handle department selection (initial registration)
    if (data.startsWith("dept_") && !data.startsWith("toggle_dept_")) {
      const deptIndex = parseInt(data.split("_")[1]);
      const department = DEPARTMENTS[deptIndex];
      
      if (!department) {
        await bot.answerCallbackQuery(query.id, { text: "–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç–¥–µ–ª–∞" });
        return;
      }
      
      // Check if IT department for admin rights
      const isAdmin = department === IT_DEPARTMENT;
      
      // Check if user exists
      let user = await storage.getTelegramUserByTelegramId(telegramId);
      
      if (user) {
        // Update existing user
        await storage.updateTelegramUserDepartment(telegramId, department, isAdmin);
      } else {
        // Create new user
        await storage.createTelegramUser({
          telegramId,
          username: query.from.username,
          firstName: query.from.first_name,
          lastName: query.from.last_name,
          department,
          isAdmin,
        });
      }
      
      // Send confirmation
      const keyboard = isAdmin ? getAdminKeyboard() : getUserKeyboard();
      
      await bot.editMessageText(
        `‚úÖ –û—Ç–ª–∏—á–Ω–æ!\n\n` +
        `–í–∞—à –æ—Ç–¥–µ–ª: ${department}\n` +
        (isAdmin ? `–°—Ç–∞—Ç—É—Å: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n\n` : `\n`) +
        `–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–µ –≤–∞—à–µ–º—É –æ—Ç–¥–µ–ª—É.` +
        (isAdmin ? `\n\n–ö–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ—Ç–¥–µ–ª–æ–≤.` : ``),
        {
          chat_id: chatId,
          message_id: query.message?.message_id,
          reply_markup: keyboard,
        }
      );
      
      await bot.answerCallbackQuery(query.id, {
        text: `–í—ã–±—Ä–∞–Ω –æ—Ç–¥–µ–ª: ${department}`,
      });
    }
    
    // Handle change department
    else if (data === "change_department") {
      await bot.editMessageText(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Ç–¥–µ–ª:",
        {
          chat_id: chatId,
          message_id: query.message?.message_id,
          reply_markup: getDepartmentKeyboard(),
        }
      );
      
      await bot.answerCallbackQuery(query.id);
    }
    
    // Handle create post
    else if (data === "create_post") {
      // Check if user is admin
      const user = await storage.getTelegramUserByTelegramId(telegramId);
      
      if (!user || !user.isAdmin) {
        await bot.answerCallbackQuery(query.id, {
          text: "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤",
          show_alert: true,
        });
        return;
      }
      
      // Set user state to awaiting text
      userStates.set(telegramId, {
        step: 'awaiting_text',
      });
      
      await bot.sendMessage(
        chatId,
        `üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å.\n\n` +
        `–ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫. –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ—Ç–¥–µ–ª—ã.`
      );
      
      await bot.answerCallbackQuery(query.id);
    }
    
    // Handle toggle department for post
    else if (data.startsWith("toggle_dept_")) {
      const userState = userStates.get(telegramId);
      
      if (!userState || userState.step !== 'awaiting_departments') {
        await bot.answerCallbackQuery(query.id, {
          text: "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –∑–∞–Ω–æ–≤–æ.",
        });
        return;
      }
      
      const deptIndex = parseInt(data.split("_")[2]);
      const department = DEPARTMENTS[deptIndex];
      
      if (!department) {
        await bot.answerCallbackQuery(query.id, { text: "–û—à–∏–±–∫–∞" });
        return;
      }
      
      // Toggle department selection
      const selected = userState.selectedDepartments || [];
      const index = selected.indexOf(department);
      
      if (index > -1) {
        selected.splice(index, 1);
      } else {
        selected.push(department);
      }
      
      userState.selectedDepartments = selected;
      
      // Update keyboard
      await bot.editMessageReplyMarkup(
        getPostDepartmentKeyboard(selected),
        {
          chat_id: chatId,
          message_id: query.message?.message_id,
        }
      );
      
      await bot.answerCallbackQuery(query.id, {
        text: index > -1 ? `–£–±—Ä–∞–Ω: ${department}` : `–í—ã–±—Ä–∞–Ω: ${department}`,
      });
    }
    
    // Handle toggle all departments
    else if (data === "toggle_all_depts") {
      const userState = userStates.get(telegramId);
      
      if (!userState || userState.step !== 'awaiting_departments') {
        await bot.answerCallbackQuery(query.id, {
          text: "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –∑–∞–Ω–æ–≤–æ.",
        });
        return;
      }
      
      const selected = userState.selectedDepartments || [];
      const allSelected = selected.length === DEPARTMENTS.length;
      
      if (allSelected) {
        userState.selectedDepartments = [];
      } else {
        userState.selectedDepartments = [...DEPARTMENTS];
      }
      
      // Update keyboard
      await bot.editMessageReplyMarkup(
        getPostDepartmentKeyboard(userState.selectedDepartments),
        {
          chat_id: chatId,
          message_id: query.message?.message_id,
        }
      );
      
      await bot.answerCallbackQuery(query.id, {
        text: allSelected ? "–í—Å–µ –æ—Ç–¥–µ–ª—ã —Å–Ω—è—Ç—ã" : "–í—Å–µ –æ—Ç–¥–µ–ª—ã –≤—ã–±—Ä–∞–Ω—ã",
      });
    }
    
    // Handle done selecting departments
    else if (data === "done_selecting_depts") {
      const userState = userStates.get(telegramId);
      
      if (!userState || userState.step !== 'awaiting_departments' || !userState.postText) {
        await bot.answerCallbackQuery(query.id, {
          text: "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –∑–∞–Ω–æ–≤–æ.",
        });
        return;
      }
      
      const selected = userState.selectedDepartments || [];
      
      if (selected.length === 0) {
        await bot.answerCallbackQuery(query.id, {
          text: "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ—Ç–¥–µ–ª",
          show_alert: true,
        });
        return;
      }
      
      // Move to confirmation step
      userState.step = 'awaiting_confirmation';
      
      // Show confirmation
      const confirmationText = 
        `üì¢ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏—é:\n\n` +
        `üìù –¢–µ–∫—Å—Ç:\n${userState.postText}\n\n` +
        `üë• –û—Ç–¥–µ–ª—ã (${selected.length}):\n` +
        selected.map(d => `‚Ä¢ ${d}`).join('\n') + '\n\n' +
        `–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ?`;
      
      await bot.editMessageText(
        confirmationText,
        {
          chat_id: chatId,
          message_id: query.message?.message_id,
          reply_markup: getConfirmationKeyboard(),
        }
      );
      
      await bot.answerCallbackQuery(query.id);
    }
    
    // Handle confirm publish
    else if (data === "confirm_publish") {
      const userState = userStates.get(telegramId);
      
      if (!userState || userState.step !== 'awaiting_confirmation' || !userState.postText) {
        await bot.answerCallbackQuery(query.id, {
          text: "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –∑–∞–Ω–æ–≤–æ.",
        });
        return;
      }
      
      const selected = userState.selectedDepartments || [];
      
      // Save notification to database
      await storage.createNotification({
        message: userState.postText,
        departments: selected,
      });
      
      // Send notifications to users
      const result = await sendNotificationToUsers(userState.postText, selected);
      
      // Clear user state
      userStates.delete(telegramId);
      
      // Edit confirmation message to remove buttons
      await bot.editMessageText(
        `‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!\n\n` +
        `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
        `‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${result.sent}\n` +
        `‚ùå –û—à–∏–±–æ–∫: ${result.failed}\n\n` +
        `üë• –û—Ç–¥–µ–ª—ã: ${selected.join(', ')}`,
        {
          chat_id: chatId,
          message_id: query.message?.message_id,
        }
      );
      
      // Send new message with admin menu
      await bot.sendMessage(
        chatId,
        `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
        {
          reply_markup: getAdminKeyboard(),
        }
      );
      
      await bot.answerCallbackQuery(query.id, {
        text: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!",
      });
    }
    
    // Handle cancel post
    else if (data === "cancel_post") {
      // Clear user state
      userStates.delete(telegramId);
      
      // Edit message to remove buttons
      await bot.editMessageText(
        `‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.`,
        {
          chat_id: chatId,
          message_id: query.message?.message_id,
        }
      );
      
      // Send new message with admin menu
      await bot.sendMessage(
        chatId,
        `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
        {
          reply_markup: getAdminKeyboard(),
        }
      );
      
      await bot.answerCallbackQuery(query.id, {
        text: "–û—Ç–º–µ–Ω–µ–Ω–æ",
      });
    }
  } catch (error) {
    console.error("Error in callback query:", error);
    await bot.answerCallbackQuery(query.id, {
      text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
    });
  }
});

// Function to send notification to users
export async function sendNotificationToUsers(
  message: string,
  departments: string[]
): Promise<{ sent: number; failed: number }> {
  try {
    // Get all users from specified departments
    const users = await storage.getTelegramUsersByDepartments(departments);
    
    let sent = 0;
    let failed = 0;
    
    // Send message to each user
    for (const user of users) {
      try {
        await bot.sendMessage(
          user.telegramId,
          `üì¢ –ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n\n${message}`,
          { parse_mode: "HTML" }
        );
        sent++;
      } catch (error) {
        console.error(`Failed to send to user ${user.telegramId}:`, error);
        failed++;
      }
    }
    
    return { sent, failed };
  } catch (error) {
    console.error("Error sending notifications:", error);
    throw error;
  }
}

console.log("Telegram bot started successfully!");

export { bot };
